generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x","native"]
}

// datasource db {
//   provider          = "mysql"
//   url               = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
// }
datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  phone         String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  salt          String
  level         Int       @default(1)
  token         String?
  avatar        String?
  provider      String    @default("EMAIL")

  reluserpermissions RelUserPermission[]
  reluserroles RelUserRole[]
  
  @@map("users")
}

model Profiss {
  id            String    @id @default(uuid())
  name          String
  alocacao      String
  born          DateTime?
  crm           String?
  email         String    @unique
  cep           String?
  street        String?
  number        String?
  complement    String?
  neighborhood  String?
  city          String?
  state         String?
  phone         String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
  notes         String?

  relprofgroups     RelProfGroup[]
  distribs          Distrib[]

  @@map("profisses")
}

model Groups {
  id            String    @id @default(uuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  scale         Scale[]
  relprofgroups RelProfGroup[]
  distribs       Distrib[]

  @@map("groups")
}

model Scale {
  id            String    @id @default(uuid())
  name          String
  start         DateTime
  end           DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  group_Id      String
  group         Groups    @relation(fields: [group_Id], references: [id])

  distribs       Distrib[]

  @@map("scales")
}

model RelProfGroup {
  id            String      @id @default(uuid())
  color         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  profiss       Profiss     @relation(fields: [profiss_Id], references: [id])
  profiss_Id    String

  group         Groups      @relation(fields: [group_Id], references: [id])
  group_Id      String

  @@map("relprofgroups")

}

model Distrib {
  id            String      @id @default(uuid())
  data          DateTime
  obs           String?

  //horaInicio    DateTime?
  //horaFim       DateTime?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  scale_Id      String
  profiss_Id    String
  group_Id      String

  scale         Scale       @relation(fields: [scale_Id], references: [id])
  profiss       Profiss?    @relation(fields: [profiss_Id], references: [id])
  group         Groups      @relation(fields: [group_Id], references: [id])

  @@map("distribs")
}

//------------------  PERMISSOES e AUTORIZAÇÕES ------------------------------

model Role {
  id            String      @id @default(uuid())
  level         Int
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  relrolepermissions RelRolePermission[]
  reluserroles RelUserRole[]

  @@map("roles")
}

model Permission {
  id            String      @id @default(uuid())
  name          String
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  relrolepermissions RelRolePermission[]
  reluserpermissions RelUserPermission[]

  @@map("permissions")
}

model RelUserRole {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  user          User        @relation(fields: [user_Id], references: [id])
  user_Id       String

  role          Role        @relation(fields: [role_Id], references: [id])
  role_Id       String

  @@map("reluserroles")
}

model RelUserPermission {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  user          User        @relation(fields: [user_Id], references: [id])
  user_Id       String

  permission    Permission  @relation(fields: [permission_Id], references: [id])
  permission_Id String

  @@map("reluserpermissions")
}

model RelRolePermission {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  role          Role        @relation(fields: [role_Id], references: [id])
  role_Id       String

  permission    Permission  @relation(fields: [permission_Id], references: [id])
  permission_Id String

  @@map("relrolepermissions")
}